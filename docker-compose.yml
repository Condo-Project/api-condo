version: '3.8'

services:

  postgres:
    image: postgres
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: transparency
      POSTGRES_USER: transparency
      POSTGRES_DB: transparency_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
    networks:
      - pgnetwork
 

  pgadmin:
    container_name: transparency-pgadmin
    image: dpage/pgadmin4
    depends_on:
      - postgres
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: test@transparency.ao
      PGADMIN_DEFAULT_PASSWORD: transparency
    restart: unless-stopped
    networks:
      - pgnetwork
    volumes:
      - pgadmin_data:/var/lib/pgadmin
  
  redis:
    image: "redis:alpine"
    # ports:
    #   - "6379:6379"
    expose:
      - 6379
    networks:
      - pgnetwork
  
  transparency:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: transparency
    ports:
      - "8061:8000"
    environment:
      - POSTGRES_DB=transparency_db
      - POSTGRES_USER=transparency
      - POSTGRES_PASSWORD=transparency
      - ENV=QAS
      - PORT=8000
      - POSTGRES_SERVER=postgres
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0

    depends_on:
      - postgres
      # - growthbook
  #   #   - redis
  #   #   - worker

    networks:
      - pgnetwork
  
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
    command: python scripts/create_tables.py
    environment:
      - POSTGRES_SERVER=postgres
      - POSTGRES_DB=transparency_db
      - POSTGRES_USER=transparency
      - POSTGRES_PASSWORD=transparency
    depends_on:
      - postgres
      - transparency
    networks:
      - pgnetwork
    restart: "no"
    # Configura o contêiner para ser removido automaticamente após a execução
    entrypoint: >
      sh -c "
      python scripts/create_tables.py &&
      alembic upgrade head &&
      echo 'Migração concluída, removendo contêiner...' &&
      exit 0"

  # worker:
  #   image: hub.itgest.co.ao:5000/waters/spinner_payments:2024.12.19-alpha
  #   volumes:
  #     - gpg_data:/root/.gnupg
  #     - ./temp/:/code/temp
  #     # - source_data:/code
  #   command: ['celery', '-A', 'adapters.celery.main.celery', 'worker', '-l', 'info']
  #   environment:
  #     - CELERY_BROKER_URL=redis://redis:6379/0
  #     - CELERY_RESULT_BACKEND=redis://redis:6379/0
  #   depends_on:
  #     - redis
  #     # - kafka
  #     - spinner_payment
  #   networks:
  #     - pgnetwork

  # beat:
  #   image: hub.itgest.co.ao:5000/waters/spinner_payments:2024.12.19-alpha
  #   volumes:
  #     - gpg_data:/root/.gnupg
  #     # - source_data:/code
  #   command: ['celery', '-A', 'adapters.celery.main.celery', 'beat', '-l', 'info']
  #   environment:
  #     - CELERY_BROKER_URL=redis://redis:6379/0
  #     - CELERY_RESULT_BACKEND=redis://redis:6379/0
  #   depends_on:
  #     - redis
  #     # - kafka
  #     - worker
  #   networks:
  #     - pgnetwork

  # flower:
  #   image: mher/flower:0.9.7
  #   command: ['flower', '--broker=redis://redis:6379/0', '--port=5555',--basic-auth=unig:service.28, --db=/app/flower/flower.sqlite]
  #   expose:
  #     - 5555
  #   ports:
  #     - "5011:5555"
  #   volumes:
  #     - flower-db:/app/flower
  #   depends_on:
  #     - redis
  #     - worker
  #   networks:
  #     - pgnetwork

networks:
  pgnetwork:
    driver: bridge

volumes:
  postgres-data:
  pgadmin_data:
  # source_data:
  # flower-db:
  # gpg_data:
  uploads:
  # mongodata:
